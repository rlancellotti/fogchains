env:
  testdir: "../test"
  epsilon: 0.05
  simtime: 1200
MM1:
  # Just an example of the defaults to control logging
  log: 
    name: "${testname}.log"
    # persist=true -> logs are kept
    # persist=false -> remove log unless an error/failure occurs 
    persist: false
  env:
    scenario: "MM1_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    mu: 10
    lambda: 8
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b 0.8 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*8 | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTResp-SC1 -o eq -b $(echo \"scale=4; 1/(${mu}-${lambda})\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTWait-SC1 -o eq -b $(echo \"scale=4; ${lambda}/(${mu}*(${mu}-${lambda}))\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTSrv-SC1 -o eq -b 0.1 -e ${epsilon}"
MG1cv01:
  env:
    scenario: "MG1cv01_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    mu: 10
    lambda: 8
    rho: 0.8
    cv: 0.1
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b ${rho} -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*${lambda} | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTWait-SC1 -o eq -b $(echo \"scale=4; 1/${mu} * (1+${cv}*${cv})/2 * ${rho}/(1-${rho})\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTSrv-SC1 -o eq -b $(echo \"scale=4; 1/${mu}\" | bc) -e ${epsilon}"
MG1cv20:
  env:
    scenario: "MG1cv20_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 5400
    mu: 10
    lambda: 8
    rho: 0.8
    cv: 2.0
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b ${rho} -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*${lambda} | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTWait-SC1 -o eq -b $(echo \"scale=4; 1/${mu} * (1+${cv}*${cv})/2 * ${rho}/(1-${rho})\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTSrv-SC1 -o eq -b $(echo \"scale=4; 1/${mu}\" | bc) -e ${epsilon}"
multicore_A05:
  env:
    scenario: "multicore_A05_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 1200
    mu: 10
    lambda: 5
    # lambda=5, mu=10-> A=lambda/mu=0.5
    A: 0.5
    ncores: 4
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "write_config.py -f ${yamlconfig} -k ncores -v ${ncores}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b ${A} -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*${lambda} | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTWait-SC1 -o eq -b $(echo \"scale=4; $(${testdir}/erlang.py -t C -A ${A} -N ${ncores})/(${ncores} * ${mu} - ${lambda})\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTSrv-SC1 -o eq -b $(echo \"scale=4; 1/${mu}\" | bc) -e ${epsilon}"
multicore_A30:
  env:
    scenario: "multicore_A30_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    mu: 10
    lambda: 30
    # lambda=30, mu=10-> A=lambda/mu=3 
    A: 3
    ncores: 4
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "write_config.py -f ${yamlconfig} -k ncores -v ${ncores}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b ${A} -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*${lambda} | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTWait-SC1 -o eq -b $(echo \"scale=4; $(${testdir}/erlang.py -t C -A ${A} -N ${ncores})/(${ncores} * ${mu} - ${lambda})\" | bc) -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SinkChainTSrv-SC1 -o eq -b $(echo \"scale=4; 1/${mu}\" | bc) -e ${epsilon}"
mobility_static_balanced_nooracle:
  env:
    scenario: "mobility_static_balanced_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 300
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b FogRho-F2 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b 0.5 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F2 -o eq -b 0.5 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*10 | bc) -e ${epsilon}"
mobility_static_balanced_oracle:
  env:
    scenario: "mobility_static_balanced_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 300
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "write_config.py -f ${yamlconfig} -k enableMappingOracle -v true"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b FogRho-F2 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b 0.5 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F2 -o eq -b 0.5 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*10 | bc) -e ${epsilon}"
mobility_static_unbalanced_nooracle:
  env:
    scenario: "mobility_static_unbalanced_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 300
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b 0.3333 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F2 -o eq -b 0.6666 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*10 | bc) -e ${epsilon}"
mobility_static_unbalanced_oracle:
  env:
    scenario: "mobility_static_unbalanced_solution"
    placement: "${scenario}.json"
    yamlconfig: "${testname}_config.yaml"
    db: "${testname}.db"
    config: "testing_config.json"
    simtime: 300
  commands:
    - "cp ${testdir}/${placement} ."
    - "write_config.py -r -f ${yamlconfig} -k files -v \"[ ${placement} ]\""
    - "write_config.py -f ${yamlconfig} -k simtime -v ${simtime}"
    - "write_config.py -f ${yamlconfig} -k enableMappingOracle -v true"
    - "update_template.py -c ${yamlconfig} -t fogchain.ini.mako"
    - "update_template.py -c ${yamlconfig} -t ${config}.mako"
    - "make_runfile.py -f fogchain.ini"
    - "make -j $(nproc) -f Runfile"
    - "parse_data.py -d ${db} -j $(nproc) -r -c ${config} results/${scenario}*.sca"
    - "analyze_data.py -d ${db} -c ${config}"
    - "rm ${yamlconfig} ${placement} ${db}"
  expect: 
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F1 -o eq -b 0.3333 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a FogRho-F2 -o eq -b 0.6666 -e ${epsilon}"
    - "check_assert.py -f analysis/${scenario}.data -a SrcSent-SC1-0 -o eq -b $(echo ${simtime}*10 | bc) -e ${epsilon}"
